#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('home-automation:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
io.on('connection', function (socket) {// WebSocket Connection

  var sData = [];
   function set() {
     sData.type = 'lamp';
     sData.no = 0;
     sData.flag = true;
     sData.type = 'lamp';
     sData.no = 1;
     sData.flag = true;
     sData.type = 'lamp';
     sData.no = 2;
     sData.flag = true;
     sData.type = 'lamp';
     sData.no = 3;
     sData.flag = true;

     sData.type = 'humanity';
     sData.no = 0;
     sData.flag = true;
     sData.type = 'humanity';
     sData.no = 1;
     sData.flag = true;

     sData.type = 'window';
     sData.no = 0;
     sData.flag = false;
     sData.type = 'window';
     sData.no = 1;
     sData.flag = true;
     sData.type = 'window';
     sData.no = 2;
     sData.flag = true;

     sData.type = 'door';
     sData.no = 0;
     sData.flag = true;
     sData.type = 'door';
     sData.no = 1;
     sData.flag = true;

     sData.type = 'security';
     sData.no = 0;
     sData.flag = true;
     sData.type = 'security';
     sData.no = 1;
     sData.flag = true;

     sData.type = 'flame';
     sData.no = 0;
     sData.flag = true;

     sData.type = 'gas';
     sData.no = 0;
     sData.flag = true;
     console.log('Seeeeee it', sData.type);
   }
    set();
    console.log('go to',sData);
    socket.emit('control', sData); //send button status to client


  socket.on('control', function(data) { //get light switch status from client
    console.log('//a/a/a',data);
    switch(data.type){
      case 'lamp':
            if(data.no == 0){
                console.log('lamp 0 is ', data.flag);
          }else if (data.no == 1) {
                console.log('lamp 1 is ', data.flag);
          } else if (data.no == 2) {
                console.log('lamp 2 is ', data.flag);
          } else {
                console.log('lamp 3 is ', data.flag);
          }
          break;
      case 'door':
            if(data.no == 0){
                console.log(' Door On is  ', data.flag);
          }else{
                console.log('Door lock is ', data.flag);
        }
        break;
        case 'security':
              if(data.no == 0){
                  console.log('Door Security is ', data.flag);
            }else {
                  console.log('Motion Security is ', data.flag);
            }
          break;
          case 'flame':
                    console.log('Flame Sensor is ', data.flag);
            break;
          case 'gas':
                    console.log('Gas Sensor is ', data.flag);
            break;
  }

  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
